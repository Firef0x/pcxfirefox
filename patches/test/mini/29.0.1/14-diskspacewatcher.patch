# HG changeset patch
# User pcxfirefox@gmail.com
# Date 1396524991 -28800
#      Thu Apr 03 19:36:31 2014 +0800
# Node ID 08e7fb457abca37f8019286f76a649c55b344049
# Parent  528f2b862a6b49aab67fa6e6fb6f7a744df7840b
Disable diskspacewatcher

diff -r 528f2b862a6b -r 08e7fb457abc configure.in
--- a/configure.in	Thu Apr 03 19:34:52 2014 +0800
+++ b/configure.in	Thu Apr 03 19:36:31 2014 +0800
@@ -7461,6 +7461,15 @@
 fi
 AC_SUBST(MOZ_BATTERY)
 
+MOZ_ARG_DISABLE_BOOL(diskspacewatcher,
+[  --disable-diskspacewatcher           Disable diskspacewatcher],
+    MOZ_DISKSPACEWATCHER=,
+    MOZ_DISKSPACEWATCHER=1)
+if test -n "$MOZ_DISKSPACEWATCHER"; then
+    AC_DEFINE(MOZ_DISKSPACEWATCHER)
+fi
+AC_SUBST(MOZ_DISKSPACEWATCHER)
+
 dnl ========================================================
 dnl = Enable Support for AudioChannelManager API
 dnl ========================================================
diff -r 528f2b862a6b -r 08e7fb457abc dom/indexedDB/IDBDatabase.cpp
--- a/dom/indexedDB/IDBDatabase.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/indexedDB/IDBDatabase.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -826,12 +826,14 @@
 
   PROFILER_LABEL("IndexedDB", "CreateObjectStoreHelper::DoDatabaseWork");
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (IndexedDatabaseManager::InLowDiskSpaceMode()) {
     NS_WARNING("Refusing to create additional objectStore because disk space "
                "is low!");
     return NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR;
   }
-
+#endif
+  
   nsCOMPtr<mozIStorageStatement> stmt =
     mTransaction->GetCachedStatement(NS_LITERAL_CSTRING(
     "INSERT INTO object_store (id, auto_increment, name, key_path) "
@@ -912,11 +914,13 @@
 
   PROFILER_LABEL("IndexedDB", "CreateFileHelper::DoDatabaseWork");
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (IndexedDatabaseManager::InLowDiskSpaceMode()) {
     NS_WARNING("Refusing to create file because disk space is low!");
     return NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR;
   }
-
+#endif
+  
   FileManager* fileManager = mDatabase->Manager();
 
   mFileInfo = fileManager->GetNewFileInfo();
diff -r 528f2b862a6b -r 08e7fb457abc dom/indexedDB/IDBObjectStore.cpp
--- a/dom/indexedDB/IDBObjectStore.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/indexedDB/IDBObjectStore.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -3144,11 +3144,13 @@
 
   PROFILER_LABEL("IndexedDB", "AddHelper::DoDatabaseWork");
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (IndexedDatabaseManager::InLowDiskSpaceMode()) {
     NS_WARNING("Refusing to add more data because disk space is low!");
     return NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR;
   }
-
+#endif
+  
   nsresult rv;
   bool keyUnset = mKey.IsUnset();
   int64_t osid = mObjectStore->Id();
@@ -4425,11 +4427,13 @@
 
   PROFILER_LABEL("IndexedDB", "CreateIndexHelper::DoDatabaseWork");
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (IndexedDatabaseManager::InLowDiskSpaceMode()) {
     NS_WARNING("Refusing to create index because disk space is low!");
     return NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR;
   }
-
+#endif
+  
   // Insert the data into the database.
   nsCOMPtr<mozIStorageStatement> stmt =
     mTransaction->GetCachedStatement(
diff -r 528f2b862a6b -r 08e7fb457abc dom/indexedDB/IndexedDatabaseManager.cpp
--- a/dom/indexedDB/IndexedDatabaseManager.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/indexedDB/IndexedDatabaseManager.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -7,7 +7,9 @@
 #include "IndexedDatabaseManager.h"
 
 #include "nsIConsoleService.h"
+#ifdef MOZ_DISKSPACEWATCHER
 #include "nsIDiskSpaceWatcher.h"
+#endif
 #include "nsIFile.h"
 #include "nsIFileStorage.h"
 #include "nsIObserverService.h"
@@ -191,7 +193,9 @@
 }
 
 bool IndexedDatabaseManager::sIsMainProcess = false;
+#ifdef MOZ_DISKSPACEWATCHER
 mozilla::Atomic<int32_t> IndexedDatabaseManager::sLowDiskSpaceMode(0);
+#endif
 
 // static
 IndexedDatabaseManager*
@@ -207,6 +211,7 @@
   if (!gDBManager) {
     sIsMainProcess = XRE_GetProcessType() == GeckoProcessType_Default;
 
+#ifdef MOZ_DISKSPACEWATCHER
     if (sIsMainProcess) {
       // See if we're starting up in low disk space conditions.
       nsCOMPtr<nsIDiskSpaceWatcher> watcher =
@@ -224,7 +229,8 @@
         NS_WARNING("No disk space watcher component available!");
       }
     }
-
+#endif
+    
     nsRefPtr<IndexedDatabaseManager> instance(new IndexedDatabaseManager());
 
     nsresult rv = instance->Init();
@@ -281,9 +287,11 @@
     nsCOMPtr<nsIObserverService> obs = mozilla::services::GetObserverService();
     NS_ENSURE_STATE(obs);
 
+#ifdef MOZ_DISKSPACEWATCHER
     nsresult rv =
       obs->AddObserver(this, DISKSPACEWATCHER_OBSERVER_TOPIC, false);
     NS_ENSURE_SUCCESS(rv, rv);
+#endif
   }
 
   return NS_OK;
@@ -465,6 +473,7 @@
   return sIsMainProcess;
 }
 
+#ifdef MOZ_DISKSPACEWATCHER
 //static
 bool
 IndexedDatabaseManager::InLowDiskSpaceMode()
@@ -475,6 +484,7 @@
   return !!sLowDiskSpaceMode;
 }
 #endif
+#endif
 
 already_AddRefed<FileManager>
 IndexedDatabaseManager::GetFileManager(PersistenceType aPersistenceType,
@@ -680,6 +690,7 @@
   NS_ASSERTION(IsMainProcess(), "Wrong process!");
   NS_ASSERTION(NS_IsMainThread(), "Wrong thread!");
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (!strcmp(aTopic, DISKSPACEWATCHER_OBSERVER_TOPIC)) {
     NS_ASSERTION(aData, "No data?!");
 
@@ -697,7 +708,8 @@
 
     return NS_OK;
   }
-
+#endif
+  
    NS_NOTREACHED("Unknown topic!");
    return NS_ERROR_UNEXPECTED;
  }
diff -r 528f2b862a6b -r 08e7fb457abc dom/indexedDB/IndexedDatabaseManager.h
--- a/dom/indexedDB/IndexedDatabaseManager.h	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/indexedDB/IndexedDatabaseManager.h	Thu Apr 03 19:36:31 2014 +0800
@@ -74,6 +74,7 @@
   }
 #endif
 
+#ifdef MOZ_DISKSPACEWATCHER
   static bool
   InLowDiskSpaceMode()
 #ifdef DEBUG
@@ -83,6 +84,7 @@
     return !!sLowDiskSpaceMode;
   }
 #endif
+#endif
 
   already_AddRefed<FileManager>
   GetFileManager(PersistenceType aPersistenceType,
@@ -166,7 +168,9 @@
   mozilla::Mutex mFileMutex;
 
   static bool sIsMainProcess;
+#ifdef MOZ_DISKSPACEWATCHER
   static mozilla::Atomic<int32_t> sLowDiskSpaceMode;
+#endif
 };
 
 END_INDEXEDDB_NAMESPACE
diff -r 528f2b862a6b -r 08e7fb457abc dom/indexedDB/OpenDatabaseHelper.cpp
--- a/dom/indexedDB/OpenDatabaseHelper.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/indexedDB/OpenDatabaseHelper.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -1940,6 +1940,7 @@
   nsresult rv;
   bool exists;
 
+#ifdef MOZ_DISKSPACEWATCHER
   if (IndexedDatabaseManager::InLowDiskSpaceMode()) {
     rv = aDBFile->Exists(&exists);
     NS_ENSURE_SUCCESS(rv, rv);
@@ -1949,7 +1950,8 @@
       return NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR;
     }
   }
-
+#endif
+  
   nsCOMPtr<nsIFileURL> dbFileUrl =
     IDBFactory::GetDatabaseFileURL(aDBFile, aPersistenceType, aGroup, aOrigin);
   NS_ENSURE_TRUE(dbFileUrl, NS_ERROR_FAILURE);
diff -r 528f2b862a6b -r 08e7fb457abc dom/src/storage/DOMStorageIPC.cpp
--- a/dom/src/storage/DOMStorageIPC.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/dom/src/storage/DOMStorageIPC.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -10,7 +10,9 @@
 #include "mozilla/dom/ContentChild.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/unused.h"
+#ifdef MOZ_DISKSPACEWATCHER
 #include "nsIDiskSpaceWatcher.h"
+#endif
 #include "nsThreadUtils.h"
 
 namespace mozilla {
@@ -311,6 +313,7 @@
       mozilla::unused << mParent->SendScopesHavingData(scopes);
     }
 
+#ifdef MOZ_DISKSPACEWATCHER
     // We need to check if the device is in a low disk space situation, so
     // we can forbid in that case any write in localStorage.
     nsCOMPtr<nsIDiskSpaceWatcher> diskSpaceWatcher =
@@ -325,6 +328,7 @@
       mozilla::unused << mParent->SendObserve(
         nsDependentCString("low-disk-space"), EmptyCString());
     }
+#endif
 
     return NS_OK;
   }
diff -r 528f2b862a6b -r 08e7fb457abc hal/Hal.cpp
--- a/hal/Hal.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/hal/Hal.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -1189,6 +1189,7 @@
   PROXY_IF_SANDBOXED(FactoryReset());
 }
 
+#ifdef MOZ_DISKSPACEWATCHER
 void
 StartDiskSpaceWatcher()
 {
@@ -1204,6 +1205,7 @@
   AssertMainThread();
   PROXY_IF_SANDBOXED(StopDiskSpaceWatcher());
 }
+#endif
 
 uint32_t
 GetTotalSystemMemory()
diff -r 528f2b862a6b -r 08e7fb457abc hal/Hal.h
--- a/hal/Hal.h	Thu Apr 03 19:34:52 2014 +0800
+++ b/hal/Hal.h	Thu Apr 03 19:36:31 2014 +0800
@@ -593,6 +593,7 @@
 void StopMonitoringGamepadStatus();
 #endif
 
+#ifdef MOZ_DISKSPACEWATCHER
 /**
  * Start monitoring disk space for low space situations.
  *
@@ -606,6 +607,7 @@
  * This API is currently only allowed to be used from the main process.
  */
 void StopDiskSpaceWatcher();
+#endif
 
 /**
  * Get total system memory of device being run on in bytes.
diff -r 528f2b862a6b -r 08e7fb457abc hal/sandbox/SandboxHal.cpp
--- a/hal/sandbox/SandboxHal.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/hal/sandbox/SandboxHal.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -431,6 +431,7 @@
   Hal()->SendFactoryReset();
 }
 
+#ifdef MOZ_DISKSPACEWATCHER
 void
 StartDiskSpaceWatcher()
 {
@@ -442,6 +443,7 @@
 {
   NS_RUNTIMEABORT("StopDiskSpaceWatcher() can't be called from sandboxed contexts.");
 }
+#endif
 
 class HalParent : public PHalParent
                 , public NetworkObserver
diff -r 528f2b862a6b -r 08e7fb457abc toolkit/components/moz.build
--- a/toolkit/components/moz.build	Thu Apr 03 19:34:52 2014 +0800
+++ b/toolkit/components/moz.build	Thu Apr 03 19:36:31 2014 +0800
@@ -17,7 +17,6 @@
     'contentprefs',
     'cookie',
     'crashmonitor',
-    'diskspacewatcher',
     'downloads',
     'exthelper',
     'filepicker',
@@ -50,6 +49,9 @@
 if CONFIG['MOZ_CRASHREPORTER']:
     PARALLEL_DIRS += ['crashes']
 
+if CONFIG['MOZ_DISKSPACEWATCHER']:
+    PARALLEL_DIRS += ['diskspacewatcher']
+
 if CONFIG['MOZ_SOCIAL']:
     PARALLEL_DIRS += ['social']
 
diff -r 528f2b862a6b -r 08e7fb457abc toolkit/library/nsStaticXULComponents.cpp
--- a/toolkit/library/nsStaticXULComponents.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/toolkit/library/nsStaticXULComponents.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -13,6 +13,12 @@
 #define AUTH_MODULE
 #endif
 
+#ifdef MOZ_DISKSPACEWATCHER
+#define DISKSPACEWATCHER_MODULE    MODULE(DiskSpaceWatcherModule)
+#else
+#define DISKSPACEWATCHER_MODULE
+#endif
+
 #ifdef MOZ_PERMISSIONS
 #define PERMISSIONS_MODULES                  \
     MODULE(nsCookieModule)                   \
@@ -239,7 +245,7 @@
     PEERCONNECTION_MODULE                    \
     GIO_MODULE                               \
     SYNTH_PICO_MODULE                        \
-    MODULE(DiskSpaceWatcherModule)           \
+    DISKSPACEWATCHER_MODULE                  \
     /* end of list */
 
 #define MODULE(_name) \
diff -r 528f2b862a6b -r 08e7fb457abc uriloader/prefetch/nsOfflineCacheUpdateService.cpp
--- a/uriloader/prefetch/nsOfflineCacheUpdateService.cpp	Thu Apr 03 19:34:52 2014 +0800
+++ b/uriloader/prefetch/nsOfflineCacheUpdateService.cpp	Thu Apr 03 19:36:31 2014 +0800
@@ -48,7 +48,9 @@
 #include "nsIAsyncVerifyRedirectCallback.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Attributes.h"
+#ifdef MOZ_DISKSPACEWATCHER
 #include "nsIDiskSpaceWatcher.h"
+#endif
 #include "nsIDocShell.h"
 #include "nsIDocShellTreeItem.h"
 #include "nsIDocShellTreeOwner.h"
@@ -315,6 +317,7 @@
                                                true);
     NS_ENSURE_SUCCESS(rv, rv);
 
+#ifdef MOZ_DISKSPACEWATCHER
     // Get the current status of the disk in terms of free space and observe
     // low device storage notifications.
     nsCOMPtr<nsIDiskSpaceWatcher> diskSpaceWatcherService =
@@ -326,6 +329,7 @@
     }
 
     rv = observerService->AddObserver(this, "disk-space-watcher", false);
+#endif
     NS_ENSURE_SUCCESS(rv, rv);
 
     gOfflineCacheUpdateService = this;
