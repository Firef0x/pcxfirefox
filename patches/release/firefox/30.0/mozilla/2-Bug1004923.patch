# HG changeset patch
# User pcxfirefox@gmail.com
# Date 1402021437 -28800
#      Fri Jun 06 10:23:57 2014 +0800
# Node ID bb56215d0de88cd948b4d26711e7360b0e441c16
# Parent  4b32af29eb5a9bf60b618e83523b0cf26d3603fd
Bug 1004923 - Refactor and optimize Windows implementation of PRMJ_Now

diff -r 4b32af29eb5a -r bb56215d0de8 js/src/jsapi.cpp
--- a/js/src/jsapi.cpp	Fri Jun 06 09:44:56 2014 +0800
+++ b/js/src/jsapi.cpp	Fri Jun 06 10:23:57 2014 +0800
@@ -568,6 +568,8 @@
     MOZ_ASSERT(!JSRuntime::hasLiveRuntimes(),
                "how do we have live runtimes before JS_Init?");
 
+    PRMJ_NowInit();
+
 #ifdef DEBUG
     CheckMessageNumbering();
     CheckMessageParameterCounts();
diff -r 4b32af29eb5a -r bb56215d0de8 js/src/prmjtime.cpp
--- a/js/src/prmjtime.cpp	Fri Jun 06 09:44:56 2014 +0800
+++ b/js/src/prmjtime.cpp	Fri Jun 06 10:23:57 2014 +0800
@@ -8,6 +8,7 @@
 
 #include "prmjtime.h"
 
+#include "mozilla/DebugOnly.h"
 #include "mozilla/MathAlgorithms.h"
 
 #ifdef SOLARIS
@@ -19,8 +20,6 @@
 #include "jstypes.h"
 #include "jsutil.h"
 
-#define PRMJ_DO_MILLISECONDS 1
-
 #ifdef XP_WIN
 #include <windef.h>
 #include <winbase.h>
@@ -50,137 +49,11 @@
 
 #endif /* XP_UNIX */
 
-#define PRMJ_YEAR_DAYS 365L
-#define PRMJ_FOUR_YEARS_DAYS (4 * PRMJ_YEAR_DAYS + 1)
-#define PRMJ_CENTURY_DAYS (25 * PRMJ_FOUR_YEARS_DAYS - 1)
-#define PRMJ_FOUR_CENTURIES_DAYS (4 * PRMJ_CENTURY_DAYS + 1)
-#define PRMJ_HOUR_SECONDS  3600L
-#define PRMJ_DAY_SECONDS  (24L * PRMJ_HOUR_SECONDS)
-#define PRMJ_YEAR_SECONDS (PRMJ_DAY_SECONDS * PRMJ_YEAR_DAYS)
-#define PRMJ_MAX_UNIX_TIMET 2145859200L /*time_t value equiv. to 12/31/2037 */
-
-/* Constants for GMT offset from 1970 */
-#define G1970GMTMICROHI        0x00dcdcad /* micro secs to 1970 hi */
-#define G1970GMTMICROLOW       0x8b3fa000 /* micro secs to 1970 low */
-
-#define G2037GMTMICROHI        0x00e45fab /* micro secs to 2037 high */
-#define G2037GMTMICROLOW       0x7a238000 /* micro secs to 2037 low */
-
-#if defined(XP_WIN)
-
-static const int64_t win2un = 0x19DB1DED53E8000;
-
-#define FILETIME2INT64(ft) (((int64_t)ft.dwHighDateTime) << 32LL | (int64_t)ft.dwLowDateTime)
-
-typedef struct CalibrationData {
-    long double freq;         /* The performance counter frequency */
-    long double offset;       /* The low res 'epoch' */
-    long double timer_offset; /* The high res 'epoch' */
-
-    /* The last high res time that we returned since recalibrating */
-    int64_t last;
-
-    bool calibrated;
-
-#ifdef JS_THREADSAFE
-    CRITICAL_SECTION data_lock;
-    CRITICAL_SECTION calibration_lock;
-#endif
-} CalibrationData;
-
-static CalibrationData calibration = { 0 };
-
-static void
-NowCalibrate()
-{
-    FILETIME ft, ftStart;
-    LARGE_INTEGER liFreq, now;
-
-    if (calibration.freq == 0.0) {
-        if(!QueryPerformanceFrequency(&liFreq)) {
-            /* High-performance timer is unavailable */
-            calibration.freq = -1.0;
-        } else {
-            calibration.freq = (long double) liFreq.QuadPart;
-        }
-    }
-    if (calibration.freq > 0.0) {
-        int64_t calibrationDelta = 0;
-
-        /* By wrapping a timeBegin/EndPeriod pair of calls around this loop,
-           the loop seems to take much less time (1 ms vs 15ms) on Vista. */
-        timeBeginPeriod(1);
-        GetSystemTimeAsFileTime(&ftStart);
-        do {
-            GetSystemTimeAsFileTime(&ft);
-        } while (memcmp(&ftStart,&ft, sizeof(ft)) == 0);
-        timeEndPeriod(1);
-
-        /*
-        calibrationDelta = (FILETIME2INT64(ft) - FILETIME2INT64(ftStart))/10;
-        fprintf(stderr, "Calibration delta was %I64d us\n", calibrationDelta);
-        */
-
-        QueryPerformanceCounter(&now);
-
-        calibration.offset = (long double) FILETIME2INT64(ft);
-        calibration.timer_offset = (long double) now.QuadPart;
-
-        /* The windows epoch is around 1600. The unix epoch is around
-           1970. win2un is the difference (in windows time units which
-           are 10 times more highres than the JS time unit) */
-        calibration.offset -= win2un;
-        calibration.offset *= 0.1;
-        calibration.last = 0;
-
-        calibration.calibrated = true;
-    }
-}
-
-#define CALIBRATIONLOCK_SPINCOUNT 0
-#define DATALOCK_SPINCOUNT 4096
-#define LASTLOCK_SPINCOUNT 4096
-
-#ifdef JS_THREADSAFE
-static PRStatus
-NowInit(void)
-{
-    memset(&calibration, 0, sizeof(calibration));
-    NowCalibrate();
-    InitializeCriticalSectionAndSpinCount(&calibration.calibration_lock, CALIBRATIONLOCK_SPINCOUNT);
-    InitializeCriticalSectionAndSpinCount(&calibration.data_lock, DATALOCK_SPINCOUNT);
-    return PR_SUCCESS;
-}
-
-void
-PRMJ_NowShutdown()
-{
-    DeleteCriticalSection(&calibration.calibration_lock);
-    DeleteCriticalSection(&calibration.data_lock);
-}
-
-#define MUTEX_LOCK(m) EnterCriticalSection(m)
-#define MUTEX_TRYLOCK(m) TryEnterCriticalSection(m)
-#define MUTEX_UNLOCK(m) LeaveCriticalSection(m)
-#define MUTEX_SETSPINCOUNT(m, c) SetCriticalSectionSpinCount((m),(c))
-
-static PRCallOnceType calibrationOnce = { 0 };
-
-#else
-
-#define MUTEX_LOCK(m)
-#define MUTEX_TRYLOCK(m) 1
-#define MUTEX_UNLOCK(m)
-#define MUTEX_SETSPINCOUNT(m, c)
-
-#endif
-
-#endif /* XP_WIN */
-
+using mozilla::DebugOnly;
 
 #if defined(XP_UNIX)
 int64_t
-PRMJ_Now(void)
+PRMJ_Now()
 {
     struct timeval tv;
 
@@ -194,195 +67,206 @@
 }
 
 #else
-/*
 
-Win32 python-esque pseudo code
-Please see bug 363258 for why the win32 timing code is so complex.
+// Returns the number of microseconds since the Unix epoch.
+static double
+FileTimeToUnixMicroseconds(const FILETIME &ft)
+{
+    // Get the time in 100ns intervals.
+    int64_t t = (int64_t(ft.dwHighDateTime) << 32) | int64_t(ft.dwLowDateTime);
 
-calibration mutex : Win32CriticalSection(spincount=0)
-data mutex : Win32CriticalSection(spincount=4096)
+    // The Windows epoch is around 1600. The Unix epoch is around 1970.
+    // Subtract the difference.
+    static const int64_t TimeToEpochIn100ns = 0x19DB1DED53E8000;
+    t -= TimeToEpochIn100ns;
 
-def NowInit():
-  init mutexes
-  PRMJ_NowCalibration()
+    // Divide by 10 to convert to microseconds.
+    return double(t) * 0.1;
+}
 
-def NowCalibration():
-  expensive up-to-15ms call
+struct CalibrationData {
+    double freq;         /* The performance counter frequency */
+    double offset;       /* The low res 'epoch' */
+    double timer_offset; /* The high res 'epoch' */
 
-def PRMJ_Now():
-  returnedTime = 0
-  needCalibration = False
-  cachedOffset = 0.0
-  calibrated = False
-  PR_CallOnce(PRMJ_NowInit)
-  do
-    if not global.calibrated or needCalibration:
-      acquire calibration mutex
-        acquire data mutex
+    bool calibrated;
 
-          // Only recalibrate if someone didn't already
-          if cachedOffset == calibration.offset:
-            // Have all waiting threads immediately wait
-            set data mutex spin count = 0
-            PRMJ_NowCalibrate()
-            calibrated = 1
+#ifdef JS_THREADSAFE
+    CRITICAL_SECTION data_lock;
+#endif
+};
 
-            set data mutex spin count = default
-        release data mutex
-      release calibration mutex
+static CalibrationData calibration = { 0 };
 
-    calculate lowres time
+static void
+NowCalibrate()
+{
+    MOZ_ASSERT(calibration.freq > 0);
 
-    if highres timer available:
-      acquire data mutex
-        calculate highres time
-        cachedOffset = calibration.offset
-        highres time = calibration.last = max(highres time, calibration.last)
-      release data mutex
+    // By wrapping a timeBegin/EndPeriod pair of calls around this loop,
+    // the loop seems to take much less time (1 ms vs 15ms) on Vista.
+    timeBeginPeriod(1);
+    FILETIME ft, ftStart;
+    GetSystemTimeAsFileTime(&ftStart);
+    do {
+        GetSystemTimeAsFileTime(&ft);
+    } while (memcmp(&ftStart, &ft, sizeof(ft)) == 0);
+    timeEndPeriod(1);
 
-      get kernel tick interval
+    LARGE_INTEGER now;
+    QueryPerformanceCounter(&now);
 
-      if abs(highres - lowres) < kernel tick:
-        returnedTime = highres time
-        needCalibration = False
-      else:
-        if calibrated:
-          returnedTime = lowres
-          needCalibration = False
-        else:
-          needCalibration = True
-    else:
-      returnedTime = lowres
-  while needCalibration
+    calibration.offset = FileTimeToUnixMicroseconds(ft);
+    calibration.timer_offset = double(now.QuadPart);
+    calibration.calibrated = true;
+}
 
-*/
+static const unsigned DataLockSpinCount = 4096;
 
+static void (WINAPI *pGetSystemTimePreciseAsFileTime)(LPFILETIME) = nullptr;
+
+void
+PRMJ_NowInit()
+{
+    memset(&calibration, 0, sizeof(calibration));
+
+    // According to the documentation, QueryPerformanceFrequency will never
+    // return false or return a non-zero frequency on systems that run
+    // Windows XP or later. Also, the frequency is fixed so we only have to
+    // query it once.
+    LARGE_INTEGER liFreq;
+    DebugOnly<BOOL> res = QueryPerformanceFrequency(&liFreq);
+    MOZ_ASSERT(res);
+    calibration.freq = double(liFreq.QuadPart);
+    MOZ_ASSERT(calibration.freq > 0.0);
+
+#ifdef JS_THREADSAFE
+    InitializeCriticalSectionAndSpinCount(&calibration.data_lock, DataLockSpinCount);
+#endif
+
+    // Windows 8 has a new API function we can use.
+    if (HMODULE h = GetModuleHandle("kernel32.dll")) {
+        pGetSystemTimePreciseAsFileTime =
+            (void (WINAPI *)(LPFILETIME))GetProcAddress(h, "GetSystemTimePreciseAsFileTime");
+    }
+}
+
+#ifdef JS_THREADSAFE
+void
+PRMJ_NowShutdown()
+{
+    DeleteCriticalSection(&calibration.data_lock);
+}
+
+#define MUTEX_LOCK(m) EnterCriticalSection(m)
+#define MUTEX_UNLOCK(m) LeaveCriticalSection(m)
+#define MUTEX_SETSPINCOUNT(m, c) SetCriticalSectionSpinCount((m),(c))
+
+#else
+
+#define MUTEX_LOCK(m)
+#define MUTEX_UNLOCK(m)
+#define MUTEX_SETSPINCOUNT(m, c)
+
+#endif
+
+// Please see bug 363258 for why the win32 timing code is so complex.
 int64_t
-PRMJ_Now(void)
+PRMJ_Now()
 {
-    static int nCalls = 0;
-    long double lowresTime, highresTimerValue;
-    FILETIME ft;
-    LARGE_INTEGER now;
+    if (pGetSystemTimePreciseAsFileTime) {
+        // Windows 8 has a new API function that does all the work.
+        FILETIME ft;
+        pGetSystemTimePreciseAsFileTime(&ft);
+        return int64_t(FileTimeToUnixMicroseconds(ft));
+    }
+
     bool calibrated = false;
-    bool needsCalibration = false;
-    int64_t returnedTime;
-    long double cachedOffset = 0.0;
-
-    /* For non threadsafe platforms, NowInit is not necessary */
-#ifdef JS_THREADSAFE
-    PR_CallOnce(&calibrationOnce, NowInit);
-#endif
-    do {
-        if (!calibration.calibrated || needsCalibration) {
-            MUTEX_LOCK(&calibration.calibration_lock);
+    bool needsCalibration = !calibration.calibrated;
+    double cachedOffset = 0.0;
+    while (true) {
+        if (needsCalibration) {
             MUTEX_LOCK(&calibration.data_lock);
 
-            /* Recalibrate only if no one else did before us */
-            if(calibration.offset == cachedOffset) {
-                /* Since calibration can take a while, make any other
-                   threads immediately wait */
+            // Recalibrate only if no one else did before us.
+            if (calibration.offset == cachedOffset) {
+                // Since calibration can take a while, make any other
+                // threads immediately wait.
                 MUTEX_SETSPINCOUNT(&calibration.data_lock, 0);
 
                 NowCalibrate();
 
                 calibrated = true;
 
-                /* Restore spin count */
-                MUTEX_SETSPINCOUNT(&calibration.data_lock, DATALOCK_SPINCOUNT);
+                // Restore spin count.
+                MUTEX_SETSPINCOUNT(&calibration.data_lock, DataLockSpinCount);
             }
+
             MUTEX_UNLOCK(&calibration.data_lock);
-            MUTEX_UNLOCK(&calibration.calibration_lock);
         }
 
+        // Calculate a low resolution time.
+        FILETIME ft;
+        GetSystemTimeAsFileTime(&ft);
+        double lowresTime = FileTimeToUnixMicroseconds(ft);
 
-        /* Calculate a low resolution time */
-        GetSystemTimeAsFileTime(&ft);
-        lowresTime = 0.1*(long double)(FILETIME2INT64(ft) - win2un);
+        // Grab high resolution time.
+        LARGE_INTEGER now;
+        QueryPerformanceCounter(&now);
+        double highresTimerValue = double(now.QuadPart);
 
-        if (calibration.freq > 0.0) {
-            long double highresTime, diff;
+        MUTEX_LOCK(&calibration.data_lock);
+        double highresTime = calibration.offset +
+            PRMJ_USEC_PER_SEC * (highresTimerValue - calibration.timer_offset) / calibration.freq;
+        cachedOffset = calibration.offset;
+        MUTEX_UNLOCK(&calibration.data_lock);
 
-            DWORD timeAdjustment, timeIncrement;
-            BOOL timeAdjustmentDisabled;
+        // Assume the NT kernel ticks every 15.6 ms. Unfortunately there's no
+        // good way to determine this (NtQueryTimerResolution is an undocumented
+        // API), but 15.6 ms seems to be the max possible value. Hardcoding 15.6
+        // means we'll recalibrate if the highres and lowres timers diverge by
+        // more than 30 ms.
+        static const double KernelTickInMicroseconds = 15625.25;
 
-            /* Default to 15.625 ms if the syscall fails */
-            long double skewThreshold = 15625.25;
-            /* Grab high resolution time */
-            QueryPerformanceCounter(&now);
-            highresTimerValue = (long double)now.QuadPart;
+        // Check for clock skew.
+        double diff = lowresTime - highresTime;
 
-            MUTEX_LOCK(&calibration.data_lock);
-            highresTime = calibration.offset + PRMJ_USEC_PER_SEC*
-                 (highresTimerValue-calibration.timer_offset)/calibration.freq;
-            cachedOffset = calibration.offset;
+        // For some reason that I have not determined, the skew can be
+        // up to twice a kernel tick. This does not seem to happen by
+        // itself, but I have only seen it triggered by another program
+        // doing some kind of file I/O. The symptoms are a negative diff
+        // followed by an equally large positive diff.
+        if (mozilla::Abs(diff) <= 2 * KernelTickInMicroseconds) {
+            // No detectable clock skew.
+            return int64_t(highresTime);
+        }
 
-            /* On some dual processor/core systems, we might get an earlier time
-               so we cache the last time that we returned */
-            calibration.last = js::Max(calibration.last, int64_t(highresTime));
-            returnedTime = calibration.last;
-            MUTEX_UNLOCK(&calibration.data_lock);
+        if (calibrated) {
+            // If we already calibrated once this instance, and the
+            // clock is still skewed, then either the processor(s) are
+            // wildly changing clockspeed or the system is so busy that
+            // we get switched out for long periods of time. In either
+            // case, it would be infeasible to make use of high
+            // resolution results for anything, so let's resort to old
+            // behavior for this call. It's possible that in the
+            // future, the user will want the high resolution timer, so
+            // we don't disable it entirely.
+            return int64_t(lowresTime);
+        }
 
-            /* Rather than assume the NT kernel ticks every 15.6ms, ask it */
-            if (GetSystemTimeAdjustment(&timeAdjustment,
-                                        &timeIncrement,
-                                        &timeAdjustmentDisabled)) {
-                if (timeAdjustmentDisabled) {
-                    /* timeAdjustment is in units of 100ns */
-                    skewThreshold = timeAdjustment/10.0;
-                } else {
-                    /* timeIncrement is in units of 100ns */
-                    skewThreshold = timeIncrement/10.0;
-                }
-            }
+        // It is possible that when we recalibrate, we will return a
+        // value less than what we have returned before; this is
+        // unavoidable. We cannot tell the different between a
+        // faulty QueryPerformanceCounter implementation and user
+        // changes to the operating system time. Since we must
+        // respect user changes to the operating system time, we
+        // cannot maintain the invariant that Date.now() never
+        // decreases; the old implementation has this behavior as
+        // well.
+        needsCalibration = true;
+    }
 
-            /* Check for clock skew */
-            diff = lowresTime - highresTime;
-
-            /* For some reason that I have not determined, the skew can be
-               up to twice a kernel tick. This does not seem to happen by
-               itself, but I have only seen it triggered by another program
-               doing some kind of file I/O. The symptoms are a negative diff
-               followed by an equally large positive diff. */
-            if (mozilla::Abs(diff) > 2 * skewThreshold) {
-                /*fprintf(stderr,"Clock skew detected (diff = %f)!\n", diff);*/
-
-                if (calibrated) {
-                    /* If we already calibrated once this instance, and the
-                       clock is still skewed, then either the processor(s) are
-                       wildly changing clockspeed or the system is so busy that
-                       we get switched out for long periods of time. In either
-                       case, it would be infeasible to make use of high
-                       resolution results for anything, so let's resort to old
-                       behavior for this call. It's possible that in the
-                       future, the user will want the high resolution timer, so
-                       we don't disable it entirely. */
-                    returnedTime = int64_t(lowresTime);
-                    needsCalibration = false;
-                } else {
-                    /* It is possible that when we recalibrate, we will return a
-                       value less than what we have returned before; this is
-                       unavoidable. We cannot tell the different between a
-                       faulty QueryPerformanceCounter implementation and user
-                       changes to the operating system time. Since we must
-                       respect user changes to the operating system time, we
-                       cannot maintain the invariant that Date.now() never
-                       decreases; the old implementation has this behavior as
-                       well. */
-                    needsCalibration = true;
-                }
-            } else {
-                /* No detectable clock skew */
-                returnedTime = int64_t(highresTime);
-                needsCalibration = false;
-            }
-        } else {
-            /* No high resolution timer is available, so fall back */
-            returnedTime = int64_t(lowresTime);
-        }
-    } while (needsCalibration);
-
-    return returnedTime;
+    MOZ_ASSUME_UNREACHABLE("Shouldn't get here");
 }
 #endif
 
diff -r 4b32af29eb5a -r bb56215d0de8 js/src/prmjtime.h
--- a/js/src/prmjtime.h	Fri Jun 06 09:44:56 2014 +0800
+++ b/js/src/prmjtime.h	Fri Jun 06 10:23:57 2014 +0800
@@ -32,14 +32,24 @@
 
 /* Return the current local time in micro-seconds */
 extern int64_t
-PRMJ_Now(void);
+PRMJ_Now();
+
+/* Initialize the resources associated with PRMJ_Now. */
+#if defined(XP_WIN)
+extern void
+PRMJ_NowInit();
+#else
+inline void
+PRMJ_NowInit() {}
+#endif
 
 /* Release the resources associated with PRMJ_Now; don't call PRMJ_Now again */
 #if defined(JS_THREADSAFE) && defined(XP_WIN)
 extern void
-PRMJ_NowShutdown(void);
+PRMJ_NowShutdown();
 #else
-#define PRMJ_NowShutdown()
+inline void
+PRMJ_NowShutdown() {}
 #endif
 
 /* Format a time value into a buffer. Same semantics as strftime() */
